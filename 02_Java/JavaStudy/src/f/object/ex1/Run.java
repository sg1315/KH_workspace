package f.object.ex1;

public class Run {
	/*
	 	1. 객체지향언어 : "객체"를 "지향"하는 언어로 "객체중심"으로 돌아간다.
	 	
	 	2. 객체란 : 현실세계에서 독립적(목적이 있고 가치가 있는 것)으로 존재하는 모든 것을 의미
	 			  -> 현실세계는 객체들간의 상호작용으로 돌아감
	 	
	 	3. 객체지향 프로그래밍 : 현실세계의 객체들간의 상호작용 -> 프로그래밍을 통해서 가상세계로 구현하는 방법
	 	
	 	4. 구현하고자하는 프로그램상의 필요한 객체들을 만들기 위해서(생성하기 위해서)
	 		: 클래스라는 설계도가 먼저 필요하다.
	 		
	 	5. 추상화 과정
	 		1) 내가 구현하고자하는 프로그램에서 필요한 객체가 뭘까? 생각해봐야한다.
	 		2) 그 객체들의 꽁통적인 속성, 기능들을 추출할 것
	 		3) 추출한 것들을 가지고 내가 구현하고자하는 프로그램의 "실질적인 목적"에 맞춰 불필요한 속성, 기능 제거
	 		4) 최종적으로 추려진 속성들을 어떤 자료형, 어떤 변수명으로 사용할 것인지 정의
	 		
	 		ex) 학생 관리 프로그램
	 		1) 학생관련 객체(김민수훈련생... 최지원훈련생... 김민지훈련생...등등)
	 		2) 공통적인 속성및 기능(이름, 나이, 주소, 전화번호, 키, 몸무게, 머리색, 발사이즈, 달리기속도, 먹는다, 달린다, 잔다, 화장실간다, 공부한다, 휴식한다, 게임한다)
	 		3) 학생 "인적사항"을 관리하는 프로그램 : 이름, 나이, 주소, 전화번호...
	 		   학생 "성적"을 관리하는 프로그램 : 이름, 반, 과목별 점수, 성장률...
	 		   학생 "건강"을 관리하는 프로그램 : 이름, 반, 달리기속도, 점프력, 몸무게, 키, 혈압...
	 		4) 이름 : String name;
	 		   나이 : int age;
	 		   키 : double height;
	 	
	 	6. 추사화한 객체를 프로그램에 적용시키기
	 		1) "변수"만으로 프로그램을 만든다.
	 			변수 : 하나의 자료형으로 하나의 값만을 보관할 수 있음
	 			name1 : 최지원, age1 : 55
	 			name2 : 김지원, age2 : 60    -> name1과 age1이 하나라는 보장이 없다.
	 		
	 		2) "배열"로 프로그램을 만든다.
	 			배열 : 하나의 자료형으로 여러개의 값들을 보관할 수 있음
	 			이름을 보관하는 배열 String[] name = {"최지원", "김지원"...}
	 			나이를 보관하는 배열 int[] age = {55, 60...}    -> name과 age배열간의 순서를 보장하지 않는다.
	 		
	 		3) 그래서 나온 개념 -> 구조체
	 		구조체 : 여러개의 자료형의 여러개의 값들을 보관할 수 있다. -> 나만의 타입을 만들 수 있음
	 		Struct human{
	 			String name;
	 			int age;
	 		}
	 		
	 		human man1 = {name : "최지원", age : 55};
	 		
	 		-> 자바에서는 구조체개념에 좀더 확장해서 기능(메서드)을 추가한다 = 클래스 
	 		
	 */
	public static void main(String[] args) {
		//객체를 생성할 때
		//class명 객체이름;
		
		Student choi; //choi라는 참조변수 생성
		choi = new Student();
		
		Student kim = new Student();
		
		choi.name = "최지원";
		choi.age = 55;
		
		kim.name = "김지원";
		kim.age = 60;
		
		choi.myInfo();
		kim.myInfo();
		
		System.out.println(kim);
		System.out.println(kim.toString());
		
	}

}
